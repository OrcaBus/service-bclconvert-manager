{
  "Comment": "A description of my state machine",
  "StartAt": "Set vars",
  "States": {
    "Set vars": {
      "Type": "Pass",
      "Next": "Get sequence run object",
      "Assign": {
        "seqOrcabusId": "{% $states.input.id %}"
      }
    },
    "Get sequence run object": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": {},
      "Arguments": {
        "FunctionName": "${__get_sequence_run_object_lambda_function_arn__}",
        "Payload": {
          "orcabusId": "{% $seqOrcabusId %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Find BCLConvert Draft Event",
      "Assign": {
        "sequenceRunObject": "{% $states.result.Payload.sequenceRunObject %}"
      }
    },
    "Find BCLConvert Draft Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__find_workflow_lambda_function_arn__}",
        "Payload": {
          "basespaceRunId": "{% $sequenceRunObject.v1pre3Id %}",
          "status": "${__draft_status__}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Found BCLConvert Draft Event",
      "Output": {},
      "Assign": {
        "workflowRunObject": "{% $states.result.Payload.workflowRunObject ? $states.result.Payload.workflowRunObject : null %}"
      }
    },
    "Found BCLConvert Draft Event": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Update BCLConvert Workflow Object",
          "Condition": "{% $workflowRunObject ? true : false %}",
          "Comment": "BCLConvert Run Exists"
        }
      ],
      "Default": "Create new BCLConvert Workflow Object"
    },
    "Update BCLConvert Workflow Object": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__update_workflow_run_object_lambda_function_arn__}",
        "Payload": {
          "portalRunId": "{% $workflowRunObject.portalRunId %}",
          "seqOrcabusId": "{% $seqOrcabusId %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "New WRM Is Deployed",
      "Output": {}
    },
    "Create new BCLConvert Workflow Object": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__create_new_workflow_run_object_lambda_function_arn__}",
        "Payload": {
          "seqOrcabusId": "{% $seqOrcabusId %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "New WRM Is Deployed",
      "Output": {}
    },
    "New WRM Is Deployed": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Put workflow run update event",
          "Condition": "{% ${__new_workflow_manager_is_deployed__} %}",
          "Comment": "New workflow manager is deployed"
        }
      ],
      "Default": "Put workflow run state change event"
    },
    "Put workflow run update event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $merge([\n  $workflowRunObject,\n  {\n    \"timestamp\": $now()  }\n]) %}",
            "DetailType": "${__workflow_run_update_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__stack_source__}"
          }
        ]
      },
      "End": true
    },
    "Put workflow run state change event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $merge([\n  $workflowRunObject,\n  {\n    \"timestamp\": $now()  }\n]) ~>\n/* Renamed libraries to linkedLibraries using the transform method */\n| $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n/* Renamed workflowName and workflowVersion using the transform method */\n| $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | %}",
            "DetailType": "${__workflow_run_state_change_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__stack_source__}"
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
